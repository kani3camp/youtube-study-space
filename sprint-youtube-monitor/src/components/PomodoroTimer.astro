<div id="pomodoro-timer" class="relative flex h-[560px] w-[480px] flex-col items-center justify-center gap-10 rounded-[44px] border border-slate-800/60 bg-slate-900/75 px-14 py-16 text-center shadow-2xl backdrop-blur">
	<div class="relative h-[420px] w-[420px]">
		<svg class="h-full w-full -rotate-90" viewBox="0 0 460 460" fill="none">
			<circle cx="230" cy="230" r="200" stroke="rgba(148, 163, 184, 0.32)" stroke-width="40" />
			<circle
				data-role="progress"
				cx="230"
				cy="230"
				r="200"
				stroke="#f97316"
				stroke-width="40"
				stroke-linecap="round"
				stroke-dasharray="0"
				stroke-dashoffset="0"
				style="transition: stroke 0.3s ease, stroke-dashoffset 1s linear"
			/>
		</svg>
		<div class="pointer-events-none absolute inset-0 flex flex-col items-center justify-center gap-5">
			<span data-role="label" class="font-display text-[1.75rem] font-extrabold uppercase tracking-[0.55em] text-orange-400">Focus</span>
			<span data-role="time" class="font-mono tabular-nums text-[5.5rem] font-black leading-tight tracking-[0.02em] text-white" style="font-feature-settings: 'tnum', 'lnum'">25:00</span>
			<span class="font-display text-lg uppercase tracking-[0.4em] text-slate-300">Pomodoro</span>
		</div>
	</div>
</div>

<script>
	const focusDuration = 25 * 60;
	const breakDuration = 5 * 60;

	const container = document.getElementById('pomodoro-timer');
	if (!container) {
		throw new Error('Pomodoro timer container not found');
	}

	const labelElement = container.querySelector('[data-role="label"]');
	const timeElement = container.querySelector('[data-role="time"]');
	const progressCircle = container.querySelector('[data-role="progress"]');

	const circumference = progressCircle ? 2 * Math.PI * progressCircle.r.baseVal.value : 0;
	if (progressCircle) {
		progressCircle.style.strokeDasharray = `${circumference}`;
		progressCircle.style.strokeDashoffset = `${circumference}`;
	}

	let isFocus = true;
	let remaining = focusDuration;

	const formatTime = (seconds) => {
		const mins = Math.floor(seconds / 60);
		const secs = seconds % 60;
		return `${String(mins).padStart(2, '0')}:${String(secs).padStart(2, '0')}`;
	};

	const getModeConfig = () =>
		isFocus
			? {
				label: 'FOCUS',
				duration: focusDuration,
				color: '#f97316'
			}
			: {
				label: 'BREAK',
				duration: breakDuration,
				color: '#22c55e'
			};

	const updateUI = () => {
		const { label, duration, color } = getModeConfig();
		if (labelElement) {
			labelElement.textContent = label;
			labelElement.style.color = color;
		}
		if (timeElement) {
			timeElement.textContent = formatTime(remaining);
		}
		if (progressCircle) {
			const elapsed = duration - remaining;
			const progressRatio = Math.min(Math.max(elapsed / duration, 0), 1);
			progressCircle.style.stroke = color;
			progressCircle.style.strokeDashoffset = `${circumference * (1 - progressRatio)}`;
		}
	};

	const switchMode = () => {
		isFocus = !isFocus;
		remaining = getModeConfig().duration;
	};

	updateUI();

	setInterval(() => {
		remaining -= 1;
		if (remaining < 0) {
			switchMode();
		}
		updateUI();
	}, 1000);
</script>
