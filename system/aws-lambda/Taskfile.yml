version: '3'

includes:
  os: ./Taskfile_{{OS}}.yml

vars:
  AWS_PROFILE_PROD: soraride
  AWS_PROFILE_DEV: soraride-dev
  AWS_PROFILE_GL: gl
  AWS_REGION: ap-northeast-1
  LAMBDA_ROLE_ARN_PROD: arn:aws:iam::652333062396:role/service-role/my-first-golang-lambda-function-role-cb8uw4th
  LAMBDA_ROLE_ARN_DEV: arn:aws:iam::657533259235:role/lambda-role
  LAMBDA_ROLE_ARN_GL: arn:aws:iam::256982007275:role/lambda-role
  LAMBDA_FUNCTION_NAMES: set_desired_max_seats youtube_organize_database daily_organize_database check_live_stream_status transfer_collection_history_bigquery process_user_rp_parallel

tasks:
  dev:
    desc: Deploy to development
    cmds:
      - # noinspection YAMLSchemaValidation
        for: { var: LAMBDA_FUNCTION_NAMES }
        task: deploy
        vars:
          FUNCTION_NAME: '{{.ITEM}}'
          PROFILE: '{{.AWS_PROFILE_DEV}}'
          REGION: '{{.AWS_REGION}}'

  prod:
    desc: Deploy to production
    prompt: This will deploy to production. Using profile "{{.AWS_PROFILE_PROD}}". Are you sure?
    cmds:
      - # noinspection YAMLSchemaValidation
        for: { var: LAMBDA_FUNCTION_NAMES }
        task: deploy
        vars:
          FUNCTION_NAME: '{{.ITEM}}'
          PROFILE: '{{.AWS_PROFILE_PROD}}'
          REGION: '{{.AWS_REGION}}'

  gl:
    desc: Deploy to GL production
    prompt: This will deploy to GL production. Using profile "{{.AWS_PROFILE_GL}}". Are you sure?
    cmds:
      - # noinspection YAMLSchemaValidation
        for: { var: LAMBDA_FUNCTION_NAMES }
        task: deploy
        vars:
          FUNCTION_NAME: '{{.ITEM}}'
          PROFILE: '{{.AWS_PROFILE_GL}}'
          REGION: '{{.AWS_REGION}}'

  create-dev:
    desc: Create a new lambda function on development
    cmds:
      - echo "Creating function {{.CLI_ARGS}} on region {{.AWS_REGION}}"
      - task: create
        vars:
          FUNCTION_NAME: '{{.CLI_ARGS}}'
          PROFILE: '{{.AWS_PROFILE_DEV}}'
          LAMBDA_ROLE_ARN: '{{.LAMBDA_ROLE_ARN_DEV}}'
          REGION: '{{.AWS_REGION}}'

  create-prod:
    desc: Create a new lambda function on production
    prompt: This will work on production. Are you sure?
    cmds:
      - echo "Creating function {{.CLI_ARGS}} on region {{.AWS_REGION}}"
      - task: create
        vars:
          FUNCTION_NAME: '{{.CLI_ARGS}}'
          PROFILE: '{{.AWS_PROFILE_PROD}}'
          LAMBDA_ROLE_ARN: '{{.LAMBDA_ROLE_ARN_PROD}}'
          REGION: '{{.AWS_REGION}}'

  create-gl:
    desc: Create a new lambda function on GL production
    prompt: This will work on GL production. Are you sure?
    cmds:
      - echo "Creating function {{.CLI_ARGS}} on region {{.AWS_REGION}}"
      - task: create
        vars:
          FUNCTION_NAME: '{{.CLI_ARGS}}'
          PROFILE: '{{.AWS_PROFILE_GL}}'
          LAMBDA_ROLE_ARN: '{{.LAMBDA_ROLE_ARN_GL}}'
          REGION: '{{.AWS_REGION}}'

  create:
    internal: true
    desc: Create a new lambda function
    cmds:
      - echo "Creating function {{.CLI_ARGS}}"
      - task: os:build
        vars:
          FUNCTION_NAME: '{{.FUNCTION_NAME}}'
      - aws lambda create-function --function-name {{.FUNCTION_NAME}} --runtime go1.x --zip-file fileb://main.zip --handler main --role {{.LAMBDA_ROLE_ARN}} --timeout 120 --profile {{.PROFILE}} --region {{.REGION}} --no-cli-pager

  deploy:
    internal: true
    desc: Update the code of a single lambda function
    cmds:
      - echo "Deploying function {{.FUNCTION_NAME}} on region {{.REGION}}"
      - task: os:build
        vars:
          FUNCTION_NAME: '{{.FUNCTION_NAME}}'
      - aws lambda update-function-code --function-name {{.FUNCTION_NAME}} --zip-file fileb://main.zip --profile {{.PROFILE}} --region {{.REGION}} --no-cli-pager
