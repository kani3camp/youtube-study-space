// Code generated by MockGen. DO NOT EDIT.
// Source: types_live_chat.go
//
// Generated by this command:
//
//	mockgen -source=types_live_chat.go -destination=mocks/types_live_chat.go
//

// Package mock_youtubebot is a generated GoMock package.
package mock_youtubebot

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	youtube "google.golang.org/api/youtube/v3"
)

// MockLiveChatBot is a mock of LiveChatBot interface.
type MockLiveChatBot struct {
	ctrl     *gomock.Controller
	recorder *MockLiveChatBotMockRecorder
	isgomock struct{}
}

// MockLiveChatBotMockRecorder is the mock recorder for MockLiveChatBot.
type MockLiveChatBotMockRecorder struct {
	mock *MockLiveChatBot
}

// NewMockLiveChatBot creates a new mock instance.
func NewMockLiveChatBot(ctrl *gomock.Controller) *MockLiveChatBot {
	mock := &MockLiveChatBot{ctrl: ctrl}
	mock.recorder = &MockLiveChatBotMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLiveChatBot) EXPECT() *MockLiveChatBotMockRecorder {
	return m.recorder
}

// BanUser mocks base method.
func (m *MockLiveChatBot) BanUser(ctx context.Context, userId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BanUser", ctx, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// BanUser indicates an expected call of BanUser.
func (mr *MockLiveChatBotMockRecorder) BanUser(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BanUser", reflect.TypeOf((*MockLiveChatBot)(nil).BanUser), ctx, userId)
}

// ListMessages mocks base method.
func (m *MockLiveChatBot) ListMessages(ctx context.Context, nextPageToken string) ([]*youtube.LiveChatMessage, string, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMessages", ctx, nextPageToken)
	ret0, _ := ret[0].([]*youtube.LiveChatMessage)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(int)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ListMessages indicates an expected call of ListMessages.
func (mr *MockLiveChatBotMockRecorder) ListMessages(ctx, nextPageToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMessages", reflect.TypeOf((*MockLiveChatBot)(nil).ListMessages), ctx, nextPageToken)
}

// PostMessage mocks base method.
func (m *MockLiveChatBot) PostMessage(ctx context.Context, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostMessage", ctx, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostMessage indicates an expected call of PostMessage.
func (mr *MockLiveChatBotMockRecorder) PostMessage(ctx, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostMessage", reflect.TypeOf((*MockLiveChatBot)(nil).PostMessage), ctx, message)
}
