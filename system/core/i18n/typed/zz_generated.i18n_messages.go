// Code generated by i18n-gen; DO NOT EDIT.
package i18nmsg

import (
	"app.modules/core/i18n/internal/engine"
)

// CommonWork: key "common:work"
func CommonWork() string {
	return engine.TranslateDefault("common:work")
}

// CommonBreak: key "common:break"
func CommonBreak() string {
	return engine.TranslateDefault("common:break")
}

// CommonOn: key "common:on"
func CommonOn() string {
	return engine.TranslateDefault("common:on")
}

// CommonOff: key "common:off"
func CommonOff() string {
	return engine.TranslateDefault("common:off")
}

// CommonSir: key "common:sir"
func CommonSir(username string) string {
	return engine.TranslateDefault("common:sir", username)
}

// CommonVipSeatId: key "common:vip-seat-id"
func CommonVipSeatId(seatId int) string {
	return engine.TranslateDefault("common:vip-seat-id", seatId)
}

// CommandOptionWarn: key "command:option-warn"
func CommandOptionWarn(username string) string {
	return engine.TranslateDefault("command:option-warn", username)
}

// CommandError: key "command:error"
func CommandError(username string) string {
	return engine.TranslateDefault("command:error", username)
}

// CommandRpEarned: key "command:rp-earned"
func CommandRpEarned(earned int) string {
	return engine.TranslateDefault("command:rp-earned", earned)
}

// CommandNotEnter: key "command:not-enter"
func CommandNotEnter(username string, inCommand string) string {
	return engine.TranslateDefault("command:not-enter", username, inCommand)
}

// CommandEnterOnly: key "command:enter-only"
func CommandEnterOnly(username string) string {
	return engine.TranslateDefault("command:enter-only", username)
}

// CommandPermission: key "command:permission"
func CommandPermission(username string, command string) string {
	return engine.TranslateDefault("command:permission", username, command)
}

// CommandExit: key "command:exit"
func CommandExit(username string, workedMin int, seat string, earn string) string {
	return engine.TranslateDefault("command:exit", username, workedMin, seat, earn)
}

// CommandUnused: key "command:unused"
func CommandUnused(username string) string {
	return engine.TranslateDefault("command:unused", username)
}

// CommandSent: key "command:sent"
func CommandSent(username string) string {
	return engine.TranslateDefault("command:sent", username)
}

// CommandRank: key "command:rank"
func CommandRank(username string, value string) string {
	return engine.TranslateDefault("command:rank", username, value)
}

// CommandInNoSeat: key "command-in:no-seat"
func CommandInNoSeat(username string, inCommand string) string {
	return engine.TranslateDefault("command-in:no-seat", username, inCommand)
}

// CommandInNoAvailability: key "command-in:no-availability"
func CommandInNoAvailability(username string, inCommand string) string {
	return engine.TranslateDefault("command-in:no-availability", username, inCommand)
}

// CommandInAlreadySeat: key "command-in:already-seat"
func CommandInAlreadySeat(username string, seat string) string {
	return engine.TranslateDefault("command-in:already-seat", username, seat)
}

// CommandInSeatMove: key "command-in:seat-move"
func CommandInSeatMove(username string, workName string, fromSeat string, toSeat string, workedMin int, rpEarned string, untilExitMin int) string {
	return engine.TranslateDefault("command-in:seat-move", username, workName, fromSeat, toSeat, workedMin, rpEarned, untilExitMin)
}

// CommandInStart: key "command-in:start"
func CommandInStart(username string, workName string, untilExitMin int, seat string) string {
	return engine.TranslateDefault("command-in:start", username, workName, untilExitMin, seat)
}

// CommandInMemberSeatForbidden: key "command-in:member-seat-forbidden"
func CommandInMemberSeatForbidden(username string) string {
	return engine.TranslateDefault("command-in:member-seat-forbidden", username)
}

// CommandInMembershipDisabled: key "command-in:membership-disabled"
func CommandInMembershipDisabled(username string) string {
	return engine.TranslateDefault("command-in:membership-disabled", username)
}

// CommandInOrdered: key "command-in:ordered"
func CommandInOrdered(menuName string, orderNum int) string {
	return engine.TranslateDefault("command-in:ordered", menuName, orderNum)
}

// CommandInTooManyOrders: key "command-in:too-many-orders"
func CommandInTooManyOrders(maxOrderCount int) string {
	return engine.TranslateDefault("command-in:too-many-orders", maxOrderCount)
}

// CommandOutAlreadyExit: key "command-out:already-exit"
func CommandOutAlreadyExit(username string) string {
	return engine.TranslateDefault("command-out:already-exit", username)
}

// CommandOutAlreadyExitWithLastExitTime: key "command-out:already-exit-with-last-exit-time"
func CommandOutAlreadyExitWithLastExitTime(username string, hour int, minute int) string {
	return engine.TranslateDefault("command-out:already-exit-with-last-exit-time", username, hour, minute)
}

// CommandUserInfoBase: key "command-user-info:base"
func CommandUserInfoBase(username string, dailyTotalTime string, totalTime string) string {
	return engine.TranslateDefault("command-user-info:base", username, dailyTotalTime, totalTime)
}

// CommandUserInfoRank: key "command-user-info:rank"
func CommandUserInfoRank(rp int) string {
	return engine.TranslateDefault("command-user-info:rank", rp)
}

// CommandUserInfoRankOn: key "command-user-info:rank-on"
func CommandUserInfoRankOn() string {
	return engine.TranslateDefault("command-user-info:rank-on")
}

// CommandUserInfoRankOnContinuous: key "command-user-info:rank-on-continuous"
func CommandUserInfoRankOnContinuous(days int, continuousDays int) string {
	return engine.TranslateDefault("command-user-info:rank-on-continuous", days, continuousDays)
}

// CommandUserInfoRankOff: key "command-user-info:rank-off"
func CommandUserInfoRankOff() string {
	return engine.TranslateDefault("command-user-info:rank-off")
}

// CommandUserInfoDefaultWorkOff: key "command-user-info:default-work-off"
func CommandUserInfoDefaultWorkOff() string {
	return engine.TranslateDefault("command-user-info:default-work-off")
}

// CommandUserInfoDefaultWork: key "command-user-info:default-work"
func CommandUserInfoDefaultWork(valueMin int) string {
	return engine.TranslateDefault("command-user-info:default-work", valueMin)
}

// CommandUserInfoFavoriteColorOff: key "command-user-info:favorite-color-off"
func CommandUserInfoFavoriteColorOff() string {
	return engine.TranslateDefault("command-user-info:favorite-color-off")
}

// CommandUserInfoFavoriteColor: key "command-user-info:favorite-color"
func CommandUserInfoFavoriteColor(value string) string {
	return engine.TranslateDefault("command-user-info:favorite-color", value)
}

// CommandUserInfoRegisterDate: key "command-user-info:register-date"
func CommandUserInfoRegisterDate(value string) string {
	return engine.TranslateDefault("command-user-info:register-date", value)
}

// CommandSeatInfoBreakUntil: key "command-seat-info:break-until"
func CommandSeatInfoBreakUntil(minutes int) string {
	return engine.TranslateDefault("command-seat-info:break-until", minutes)
}

// CommandSeatInfoBase: key "command-seat-info:base"
func CommandSeatInfoBase(username string, seat string, state string, sitDurationMin int, studyDurationMin int, remainMin int, breakUntil string) string {
	return engine.TranslateDefault("command-seat-info:base", username, seat, state, sitDurationMin, studyDurationMin, remainMin, breakUntil)
}

// CommandSeatInfoDetails: key "command-seat-info:details"
func CommandSeatInfoDetails(recentRangeMin int, seatId string, recentTotalEntryDurationMin int) string {
	return engine.TranslateDefault("command-seat-info:details", recentRangeMin, seatId, recentTotalEntryDurationMin)
}

// CommandReportNoMessage: key "command-report:no-message"
func CommandReportNoMessage(username string) string {
	return engine.TranslateDefault("command-report:no-message", username)
}

// CommandReportOwner: key "command-report:owner"
func CommandReportOwner(reportCommand string, userId string, userDisplayName string, message string) string {
	return engine.TranslateDefault("command-report:owner", reportCommand, userId, userDisplayName, message)
}

// CommandReportModerators: key "command-report:moderators"
func CommandReportModerators(reportCommand string, userDisplayName string, message string) string {
	return engine.TranslateDefault("command-report:moderators", reportCommand, userDisplayName, message)
}

// CommandReportAlert: key "command-report:alert"
func CommandReportAlert(username string) string {
	return engine.TranslateDefault("command-report:alert", username)
}

// CommandKickKick: key "command-kick:kick"
func CommandKickKick(username string, seat string, targetUser string) string {
	return engine.TranslateDefault("command-kick:kick", username, seat, targetUser)
}

// CommandBlockBlock: key "command-block:block"
func CommandBlockBlock(username string, seat string, targetUser string) string {
	return engine.TranslateDefault("command-block:block", username, seat, targetUser)
}

// CommandMyAlreadyRank: key "command-my:already-rank"
func CommandMyAlreadyRank(value string) string {
	return engine.TranslateDefault("command-my:already-rank", value)
}

// CommandMySetRank: key "command-my:set-rank"
func CommandMySetRank(value string) string {
	return engine.TranslateDefault("command-my:set-rank", value)
}

// CommandMyResetDefaultWork: key "command-my:reset-default-work"
func CommandMyResetDefaultWork() string {
	return engine.TranslateDefault("command-my:reset-default-work")
}

// CommandMySetDefaultWork: key "command-my:set-default-work"
func CommandMySetDefaultWork(valueMin int) string {
	return engine.TranslateDefault("command-my:set-default-work", valueMin)
}

// CommandMyResetFavoriteColor: key "command-my:reset-favorite-color"
func CommandMyResetFavoriteColor() string {
	return engine.TranslateDefault("command-my:reset-favorite-color")
}

// CommandMySetFavoriteColor: key "command-my:set-favorite-color"
func CommandMySetFavoriteColor() string {
	return engine.TranslateDefault("command-my:set-favorite-color")
}

// CommandMyAlertFavoriteColor: key "command-my:alert-favorite-color"
func CommandMyAlertFavoriteColor(hour int) string {
	return engine.TranslateDefault("command-my:alert-favorite-color", hour)
}

// CommandChangeUpdateWork: key "command-change:update-work"
func CommandChangeUpdateWork(workName string, seat string) string {
	return engine.TranslateDefault("command-change:update-work", workName, seat)
}

// CommandChangeUpdateBreak: key "command-change:update-break"
func CommandChangeUpdateBreak(workName string, seat string) string {
	return engine.TranslateDefault("command-change:update-break", workName, seat)
}

// CommandChangeWorkDurationBefore: key "command-change:work-duration-before"
func CommandChangeWorkDurationBefore(requestedMin int, realtimeEntryDurationMin int, remainingWorkMin int) string {
	return engine.TranslateDefault("command-change:work-duration-before", requestedMin, realtimeEntryDurationMin, remainingWorkMin)
}

// CommandChangeWorkDurationAfter: key "command-change:work-duration-after"
func CommandChangeWorkDurationAfter(maxWorkTimeMin int, realtimeEntryDurationMin int, remainingWorkMin int) string {
	return engine.TranslateDefault("command-change:work-duration-after", maxWorkTimeMin, realtimeEntryDurationMin, remainingWorkMin)
}

// CommandChangeWorkDuration: key "command-change:work-duration"
func CommandChangeWorkDuration(requestedMin int, realtimeEntryDurationMin int, remainingWorkMin int) string {
	return engine.TranslateDefault("command-change:work-duration", requestedMin, realtimeEntryDurationMin, remainingWorkMin)
}

// CommandChangeBreakDurationBefore: key "command-change:break-duration-before"
func CommandChangeBreakDurationBefore(requestedMin int, realtimeBreakDurationMin int, remainingBreakMin int) string {
	return engine.TranslateDefault("command-change:break-duration-before", requestedMin, realtimeBreakDurationMin, remainingBreakMin)
}

// CommandChangeBreakDuration: key "command-change:break-duration"
func CommandChangeBreakDuration(requestedMin int, realtimeBreakDurationMin int, remainingBreakMin int) string {
	return engine.TranslateDefault("command-change:break-duration", requestedMin, realtimeBreakDurationMin, remainingBreakMin)
}

// CommandMoreMaxWork: key "command-more:max-work"
func CommandMoreMaxWork() string {
	return engine.TranslateDefault("command-more:max-work")
}

// CommandMoreMaxBreak: key "command-more:max-break"
func CommandMoreMaxBreak() string {
	return engine.TranslateDefault("command-more:max-break")
}

// CommandMoreReplyWork: key "command-more:reply-work"
func CommandMoreReplyWork(addedMin int) string {
	return engine.TranslateDefault("command-more:reply-work", addedMin)
}

// CommandMoreReplyBreak: key "command-more:reply-break"
func CommandMoreReplyBreak(addedMin int, remainingBreakMin int) string {
	return engine.TranslateDefault("command-more:reply-break", addedMin, remainingBreakMin)
}

// CommandMoreReply: key "command-more:reply"
func CommandMoreReply(realtimeEnteredMin int, remainingUntilExitMin int) string {
	return engine.TranslateDefault("command-more:reply", realtimeEnteredMin, remainingUntilExitMin)
}

// CommandBreakWorkOnly: key "command-break:work-only"
func CommandBreakWorkOnly(username string) string {
	return engine.TranslateDefault("command-break:work-only", username)
}

// CommandBreakWarn: key "command-break:warn"
func CommandBreakWarn(username string, minBreakIntervalMin int, currentWorkedMin int) string {
	return engine.TranslateDefault("command-break:warn", username, minBreakIntervalMin, currentWorkedMin)
}

// CommandBreakBreak: key "command-break:break"
func CommandBreakBreak(username string, workName string, maxBreakDurationMin int, seat string) string {
	return engine.TranslateDefault("command-break:break", username, workName, maxBreakDurationMin, seat)
}

// CommandResumeBreakOnly: key "command-resume:break-only"
func CommandResumeBreakOnly(username string) string {
	return engine.TranslateDefault("command-resume:break-only", username)
}

// CommandResumeWork: key "command-resume:work"
func CommandResumeWork(username string, seat string, untilExitMin int) string {
	return engine.TranslateDefault("command-resume:work", username, seat, untilExitMin)
}

// CommandOrderTooManyOrders: key "command-order:too-many-orders"
func CommandOrderTooManyOrders(username string, maxOrderCount int) string {
	return engine.TranslateDefault("command-order:too-many-orders", username, maxOrderCount)
}

// CommandOrderOrdered: key "command-order:ordered"
func CommandOrderOrdered(username string, menuName string, count int) string {
	return engine.TranslateDefault("command-order:ordered", username, menuName, count)
}

// CommandOrderCleared: key "command-order:cleared"
func CommandOrderCleared(username string) string {
	return engine.TranslateDefault("command-order:cleared", username)
}

// OthersForceMove: key "others:force-move"
func OthersForceMove(username string, seat string) string {
	return engine.TranslateDefault("others:force-move", username, seat)
}

// OthersClearWork: key "others:clear-work"
func OthersClearWork(username string, seat string) string {
	return engine.TranslateDefault("others:clear-work", username, seat)
}

// OthersClearBreak: key "others:clear-break"
func OthersClearBreak(username string, seat string) string {
	return engine.TranslateDefault("others:clear-break", username, seat)
}

// ParseInvalidSeatId: key "parse:invalid-seat-id"
func ParseInvalidSeatId() string {
	return engine.TranslateDefault("parse:invalid-seat-id")
}

// ParseMissingSeatId: key "parse:missing-seat-id"
func ParseMissingSeatId() string {
	return engine.TranslateDefault("parse:missing-seat-id")
}

// ParseMissingMessage: key "parse:missing-message"
func ParseMissingMessage(command string) string {
	return engine.TranslateDefault("parse:missing-message", command)
}

// ParseMissingMoreOption: key "parse:missing-more-option"
func ParseMissingMoreOption() string {
	return engine.TranslateDefault("parse:missing-more-option")
}

// ParseCheckOption: key "parse:check-option"
func ParseCheckOption(optionName string) string {
	return engine.TranslateDefault("parse:check-option", optionName)
}

// ParseNonHalfWidthDigitOption: key "parse:non-half-width-digit-option"
func ParseNonHalfWidthDigitOption(optionPrefix string) string {
	return engine.TranslateDefault("parse:non-half-width-digit-option", optionPrefix)
}

// ParseInvalidOption: key "parse:invalid-option"
func ParseInvalidOption() string {
	return engine.TranslateDefault("parse:invalid-option")
}

// ParseMissingTimeOption: key "parse:missing-time-option"
func ParseMissingTimeOption(timeOptionPrefix string) string {
	return engine.TranslateDefault("parse:missing-time-option", timeOptionPrefix)
}

// ValidateInvalidWorkTimeRange: key "validate:invalid-work-time-range"
func ValidateInvalidWorkTimeRange(minMin int, maxMin int) string {
	return engine.TranslateDefault("validate:invalid-work-time-range", minMin, maxMin)
}

// ValidateNegativeSeatId: key "validate:negative-seat-id"
func ValidateNegativeSeatId() string {
	return engine.TranslateDefault("validate:negative-seat-id")
}

// ValidateInvalidFavoriteColorOption: key "validate:invalid-favorite-color-option"
func ValidateInvalidFavoriteColorOption(favoriteColorOptionPrefix string) string {
	return engine.TranslateDefault("validate:invalid-favorite-color-option", favoriteColorOptionPrefix)
}

// ValidateNonOneOrMoreSeatId: key "validate:non-one-or-more-seat-id"
func ValidateNonOneOrMoreSeatId() string {
	return engine.TranslateDefault("validate:non-one-or-more-seat-id")
}

// ValidateMissingOption: key "validate:missing-option"
func ValidateMissingOption() string {
	return engine.TranslateDefault("validate:missing-option")
}

// ValidateInvalidBreakTimeRange: key "validate:invalid-break-time-range"
func ValidateInvalidBreakTimeRange(minMin int, maxMin int) string {
	return engine.TranslateDefault("validate:invalid-break-time-range", minMin, maxMin)
}

// ValidateNonOneOrMoreExtendedTime: key "validate:non-one-or-more-extended-time"
func ValidateNonOneOrMoreExtendedTime() string {
	return engine.TranslateDefault("validate:non-one-or-more-extended-time")
}

// ValidateInvalidMenuNumberRange: key "validate:invalid-menu-number-range"
func ValidateInvalidMenuNumberRange(maxMenuNumber int) string {
	return engine.TranslateDefault("validate:invalid-menu-number-range", maxMenuNumber)
}

