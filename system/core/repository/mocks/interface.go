// Code generated by MockGen. DO NOT EDIT.
// Source: ./core/repository/interface.go
//
// Generated by this command:
//
//	mockgen -source ./core/repository/interface.go -destination ./core/repository/mocks/interface.go -package mock_repository
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"
	time "time"

	repository "app.modules/core/repository"
	firestore "cloud.google.com/go/firestore"
	gomock "go.uber.org/mock/gomock"
)

// MockDBClient is a mock of DBClient interface.
type MockDBClient struct {
	ctrl     *gomock.Controller
	recorder *MockDBClientMockRecorder
	isgomock struct{}
}

// MockDBClientMockRecorder is the mock recorder for MockDBClient.
type MockDBClientMockRecorder struct {
	mock *MockDBClient
}

// NewMockDBClient creates a new mock instance.
func NewMockDBClient(ctrl *gomock.Controller) *MockDBClient {
	mock := &MockDBClient{ctrl: ctrl}
	mock.recorder = &MockDBClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBClient) EXPECT() *MockDBClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDBClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDBClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDBClient)(nil).Close))
}

// Collection mocks base method.
func (m *MockDBClient) Collection(path string) *firestore.CollectionRef {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Collection", path)
	ret0, _ := ret[0].(*firestore.CollectionRef)
	return ret0
}

// Collection indicates an expected call of Collection.
func (mr *MockDBClientMockRecorder) Collection(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collection", reflect.TypeOf((*MockDBClient)(nil).Collection), path)
}

// Doc mocks base method.
func (m *MockDBClient) Doc(path string) *firestore.DocumentRef {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Doc", path)
	ret0, _ := ret[0].(*firestore.DocumentRef)
	return ret0
}

// Doc indicates an expected call of Doc.
func (mr *MockDBClientMockRecorder) Doc(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Doc", reflect.TypeOf((*MockDBClient)(nil).Doc), path)
}

// RunTransaction mocks base method.
func (m *MockDBClient) RunTransaction(ctx context.Context, f func(context.Context, *firestore.Transaction) error, opts ...firestore.TransactionOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, f}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunTransaction", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunTransaction indicates an expected call of RunTransaction.
func (mr *MockDBClientMockRecorder) RunTransaction(ctx, f any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, f}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunTransaction", reflect.TypeOf((*MockDBClient)(nil).RunTransaction), varargs...)
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CountUserOrdersOfTheDay mocks base method.
func (m *MockRepository) CountUserOrdersOfTheDay(ctx context.Context, userId string, date time.Time) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUserOrdersOfTheDay", ctx, userId, date)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountUserOrdersOfTheDay indicates an expected call of CountUserOrdersOfTheDay.
func (mr *MockRepositoryMockRecorder) CountUserOrdersOfTheDay(ctx, userId, date any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUserOrdersOfTheDay", reflect.TypeOf((*MockRepository)(nil).CountUserOrdersOfTheDay), ctx, userId, date)
}

// CreateLiveChatHistoryDoc mocks base method.
func (m *MockRepository) CreateLiveChatHistoryDoc(ctx context.Context, tx *firestore.Transaction, liveChatHistoryDoc repository.LiveChatHistoryDoc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLiveChatHistoryDoc", ctx, tx, liveChatHistoryDoc)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLiveChatHistoryDoc indicates an expected call of CreateLiveChatHistoryDoc.
func (mr *MockRepositoryMockRecorder) CreateLiveChatHistoryDoc(ctx, tx, liveChatHistoryDoc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLiveChatHistoryDoc", reflect.TypeOf((*MockRepository)(nil).CreateLiveChatHistoryDoc), ctx, tx, liveChatHistoryDoc)
}

// CreateOrderHistoryDoc mocks base method.
func (m *MockRepository) CreateOrderHistoryDoc(ctx context.Context, tx *firestore.Transaction, orderHistoryDoc repository.OrderHistoryDoc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderHistoryDoc", ctx, tx, orderHistoryDoc)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrderHistoryDoc indicates an expected call of CreateOrderHistoryDoc.
func (mr *MockRepositoryMockRecorder) CreateOrderHistoryDoc(ctx, tx, orderHistoryDoc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderHistoryDoc", reflect.TypeOf((*MockRepository)(nil).CreateOrderHistoryDoc), ctx, tx, orderHistoryDoc)
}

// CreateSeat mocks base method.
func (m *MockRepository) CreateSeat(tx *firestore.Transaction, seat repository.SeatDoc, isMemberSeat bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSeat", tx, seat, isMemberSeat)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSeat indicates an expected call of CreateSeat.
func (mr *MockRepositoryMockRecorder) CreateSeat(tx, seat, isMemberSeat any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSeat", reflect.TypeOf((*MockRepository)(nil).CreateSeat), tx, seat, isMemberSeat)
}

// CreateSeatLimitInBLACKList mocks base method.
func (m *MockRepository) CreateSeatLimitInBLACKList(ctx context.Context, seatId int, userId string, createdAt, until time.Time, isMemberSeat bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSeatLimitInBLACKList", ctx, seatId, userId, createdAt, until, isMemberSeat)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSeatLimitInBLACKList indicates an expected call of CreateSeatLimitInBLACKList.
func (mr *MockRepositoryMockRecorder) CreateSeatLimitInBLACKList(ctx, seatId, userId, createdAt, until, isMemberSeat any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSeatLimitInBLACKList", reflect.TypeOf((*MockRepository)(nil).CreateSeatLimitInBLACKList), ctx, seatId, userId, createdAt, until, isMemberSeat)
}

// CreateSeatLimitInWHITEList mocks base method.
func (m *MockRepository) CreateSeatLimitInWHITEList(ctx context.Context, seatId int, userId string, createdAt, until time.Time, isMemberSeat bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSeatLimitInWHITEList", ctx, seatId, userId, createdAt, until, isMemberSeat)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSeatLimitInWHITEList indicates an expected call of CreateSeatLimitInWHITEList.
func (mr *MockRepositoryMockRecorder) CreateSeatLimitInWHITEList(ctx, seatId, userId, createdAt, until, isMemberSeat any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSeatLimitInWHITEList", reflect.TypeOf((*MockRepository)(nil).CreateSeatLimitInWHITEList), ctx, seatId, userId, createdAt, until, isMemberSeat)
}

// CreateUser mocks base method.
func (m *MockRepository) CreateUser(ctx context.Context, tx *firestore.Transaction, userId string, userData repository.UserDoc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, tx, userId, userData)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockRepositoryMockRecorder) CreateUser(ctx, tx, userId, userData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockRepository)(nil).CreateUser), ctx, tx, userId, userData)
}

// CreateUserActivityDoc mocks base method.
func (m *MockRepository) CreateUserActivityDoc(ctx context.Context, tx *firestore.Transaction, activity repository.UserActivityDoc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserActivityDoc", ctx, tx, activity)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserActivityDoc indicates an expected call of CreateUserActivityDoc.
func (mr *MockRepositoryMockRecorder) CreateUserActivityDoc(ctx, tx, activity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserActivityDoc", reflect.TypeOf((*MockRepository)(nil).CreateUserActivityDoc), ctx, tx, activity)
}

// DeleteDocRef mocks base method.
func (m *MockRepository) DeleteDocRef(ctx context.Context, tx *firestore.Transaction, ref *firestore.DocumentRef) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDocRef", ctx, tx, ref)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDocRef indicates an expected call of DeleteDocRef.
func (mr *MockRepositoryMockRecorder) DeleteDocRef(ctx, tx, ref any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDocRef", reflect.TypeOf((*MockRepository)(nil).DeleteDocRef), ctx, tx, ref)
}

// DeleteSeat mocks base method.
func (m *MockRepository) DeleteSeat(ctx context.Context, tx *firestore.Transaction, seatId int, isMemberSeat bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSeat", ctx, tx, seatId, isMemberSeat)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSeat indicates an expected call of DeleteSeat.
func (mr *MockRepositoryMockRecorder) DeleteSeat(ctx, tx, seatId, isMemberSeat any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSeat", reflect.TypeOf((*MockRepository)(nil).DeleteSeat), ctx, tx, seatId, isMemberSeat)
}

// DeleteSeatLimitInBLACKList mocks base method.
func (m *MockRepository) DeleteSeatLimitInBLACKList(ctx context.Context, docId string, isMemberSeat bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSeatLimitInBLACKList", ctx, docId, isMemberSeat)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSeatLimitInBLACKList indicates an expected call of DeleteSeatLimitInBLACKList.
func (mr *MockRepositoryMockRecorder) DeleteSeatLimitInBLACKList(ctx, docId, isMemberSeat any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSeatLimitInBLACKList", reflect.TypeOf((*MockRepository)(nil).DeleteSeatLimitInBLACKList), ctx, docId, isMemberSeat)
}

// DeleteSeatLimitInWHITEList mocks base method.
func (m *MockRepository) DeleteSeatLimitInWHITEList(ctx context.Context, docId string, isMemberSeat bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSeatLimitInWHITEList", ctx, docId, isMemberSeat)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSeatLimitInWHITEList indicates an expected call of DeleteSeatLimitInWHITEList.
func (mr *MockRepositoryMockRecorder) DeleteSeatLimitInWHITEList(ctx, docId, isMemberSeat any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSeatLimitInWHITEList", reflect.TypeOf((*MockRepository)(nil).DeleteSeatLimitInWHITEList), ctx, docId, isMemberSeat)
}

// FirestoreClient mocks base method.
func (m *MockRepository) FirestoreClient() repository.DBClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FirestoreClient")
	ret0, _ := ret[0].(repository.DBClient)
	return ret0
}

// FirestoreClient indicates an expected call of FirestoreClient.
func (mr *MockRepositoryMockRecorder) FirestoreClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirestoreClient", reflect.TypeOf((*MockRepository)(nil).FirestoreClient))
}

// Get500LiveChatHistoryDocIdsBeforeDate mocks base method.
func (m *MockRepository) Get500LiveChatHistoryDocIdsBeforeDate(ctx context.Context, date time.Time) *firestore.DocumentIterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get500LiveChatHistoryDocIdsBeforeDate", ctx, date)
	ret0, _ := ret[0].(*firestore.DocumentIterator)
	return ret0
}

// Get500LiveChatHistoryDocIdsBeforeDate indicates an expected call of Get500LiveChatHistoryDocIdsBeforeDate.
func (mr *MockRepositoryMockRecorder) Get500LiveChatHistoryDocIdsBeforeDate(ctx, date any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get500LiveChatHistoryDocIdsBeforeDate", reflect.TypeOf((*MockRepository)(nil).Get500LiveChatHistoryDocIdsBeforeDate), ctx, date)
}

// Get500OrderHistoryDocIdsBeforeDate mocks base method.
func (m *MockRepository) Get500OrderHistoryDocIdsBeforeDate(ctx context.Context, date time.Time) *firestore.DocumentIterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get500OrderHistoryDocIdsBeforeDate", ctx, date)
	ret0, _ := ret[0].(*firestore.DocumentIterator)
	return ret0
}

// Get500OrderHistoryDocIdsBeforeDate indicates an expected call of Get500OrderHistoryDocIdsBeforeDate.
func (mr *MockRepositoryMockRecorder) Get500OrderHistoryDocIdsBeforeDate(ctx, date any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get500OrderHistoryDocIdsBeforeDate", reflect.TypeOf((*MockRepository)(nil).Get500OrderHistoryDocIdsBeforeDate), ctx, date)
}

// Get500SeatLimitsAfterUntilInBLACKList mocks base method.
func (m *MockRepository) Get500SeatLimitsAfterUntilInBLACKList(ctx context.Context, thresholdTime time.Time, isMemberSeat bool) *firestore.DocumentIterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get500SeatLimitsAfterUntilInBLACKList", ctx, thresholdTime, isMemberSeat)
	ret0, _ := ret[0].(*firestore.DocumentIterator)
	return ret0
}

// Get500SeatLimitsAfterUntilInBLACKList indicates an expected call of Get500SeatLimitsAfterUntilInBLACKList.
func (mr *MockRepositoryMockRecorder) Get500SeatLimitsAfterUntilInBLACKList(ctx, thresholdTime, isMemberSeat any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get500SeatLimitsAfterUntilInBLACKList", reflect.TypeOf((*MockRepository)(nil).Get500SeatLimitsAfterUntilInBLACKList), ctx, thresholdTime, isMemberSeat)
}

// Get500SeatLimitsAfterUntilInWHITEList mocks base method.
func (m *MockRepository) Get500SeatLimitsAfterUntilInWHITEList(ctx context.Context, thresholdTime time.Time, isMemberSeat bool) *firestore.DocumentIterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get500SeatLimitsAfterUntilInWHITEList", ctx, thresholdTime, isMemberSeat)
	ret0, _ := ret[0].(*firestore.DocumentIterator)
	return ret0
}

// Get500SeatLimitsAfterUntilInWHITEList indicates an expected call of Get500SeatLimitsAfterUntilInWHITEList.
func (mr *MockRepositoryMockRecorder) Get500SeatLimitsAfterUntilInWHITEList(ctx, thresholdTime, isMemberSeat any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get500SeatLimitsAfterUntilInWHITEList", reflect.TypeOf((*MockRepository)(nil).Get500SeatLimitsAfterUntilInWHITEList), ctx, thresholdTime, isMemberSeat)
}

// Get500UserActivityDocIdsBeforeDate mocks base method.
func (m *MockRepository) Get500UserActivityDocIdsBeforeDate(ctx context.Context, date time.Time) *firestore.DocumentIterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get500UserActivityDocIdsBeforeDate", ctx, date)
	ret0, _ := ret[0].(*firestore.DocumentIterator)
	return ret0
}

// Get500UserActivityDocIdsBeforeDate indicates an expected call of Get500UserActivityDocIdsBeforeDate.
func (mr *MockRepositoryMockRecorder) Get500UserActivityDocIdsBeforeDate(ctx, date any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get500UserActivityDocIdsBeforeDate", reflect.TypeOf((*MockRepository)(nil).Get500UserActivityDocIdsBeforeDate), ctx, date)
}

// GetAllNonDailyZeroUserDocs mocks base method.
func (m *MockRepository) GetAllNonDailyZeroUserDocs(ctx context.Context) *firestore.DocumentIterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllNonDailyZeroUserDocs", ctx)
	ret0, _ := ret[0].(*firestore.DocumentIterator)
	return ret0
}

// GetAllNonDailyZeroUserDocs indicates an expected call of GetAllNonDailyZeroUserDocs.
func (mr *MockRepositoryMockRecorder) GetAllNonDailyZeroUserDocs(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllNonDailyZeroUserDocs", reflect.TypeOf((*MockRepository)(nil).GetAllNonDailyZeroUserDocs), ctx)
}

// GetAllUserActivityDocIdsAfterDate mocks base method.
func (m *MockRepository) GetAllUserActivityDocIdsAfterDate(ctx context.Context, date time.Time) *firestore.DocumentIterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUserActivityDocIdsAfterDate", ctx, date)
	ret0, _ := ret[0].(*firestore.DocumentIterator)
	return ret0
}

// GetAllUserActivityDocIdsAfterDate indicates an expected call of GetAllUserActivityDocIdsAfterDate.
func (mr *MockRepositoryMockRecorder) GetAllUserActivityDocIdsAfterDate(ctx, date any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUserActivityDocIdsAfterDate", reflect.TypeOf((*MockRepository)(nil).GetAllUserActivityDocIdsAfterDate), ctx, date)
}

// GetAllUserDocRefs mocks base method.
func (m *MockRepository) GetAllUserDocRefs(ctx context.Context) ([]*firestore.DocumentRef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUserDocRefs", ctx)
	ret0, _ := ret[0].([]*firestore.DocumentRef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUserDocRefs indicates an expected call of GetAllUserDocRefs.
func (mr *MockRepositoryMockRecorder) GetAllUserDocRefs(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUserDocRefs", reflect.TypeOf((*MockRepository)(nil).GetAllUserDocRefs), ctx)
}

// GetEnterRoomUserActivityDocIdsAfterDateForUserAndSeat mocks base method.
func (m *MockRepository) GetEnterRoomUserActivityDocIdsAfterDateForUserAndSeat(ctx context.Context, date time.Time, userId string, seatId int, isMemberSeat bool) ([]repository.UserActivityDoc, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnterRoomUserActivityDocIdsAfterDateForUserAndSeat", ctx, date, userId, seatId, isMemberSeat)
	ret0, _ := ret[0].([]repository.UserActivityDoc)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnterRoomUserActivityDocIdsAfterDateForUserAndSeat indicates an expected call of GetEnterRoomUserActivityDocIdsAfterDateForUserAndSeat.
func (mr *MockRepositoryMockRecorder) GetEnterRoomUserActivityDocIdsAfterDateForUserAndSeat(ctx, date, userId, seatId, isMemberSeat any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnterRoomUserActivityDocIdsAfterDateForUserAndSeat", reflect.TypeOf((*MockRepository)(nil).GetEnterRoomUserActivityDocIdsAfterDateForUserAndSeat), ctx, date, userId, seatId, isMemberSeat)
}

// GetExitRoomUserActivityDocIdsAfterDateForUserAndSeat mocks base method.
func (m *MockRepository) GetExitRoomUserActivityDocIdsAfterDateForUserAndSeat(ctx context.Context, date time.Time, userId string, seatId int, isMemberSeat bool) ([]repository.UserActivityDoc, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExitRoomUserActivityDocIdsAfterDateForUserAndSeat", ctx, date, userId, seatId, isMemberSeat)
	ret0, _ := ret[0].([]repository.UserActivityDoc)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExitRoomUserActivityDocIdsAfterDateForUserAndSeat indicates an expected call of GetExitRoomUserActivityDocIdsAfterDateForUserAndSeat.
func (mr *MockRepositoryMockRecorder) GetExitRoomUserActivityDocIdsAfterDateForUserAndSeat(ctx, date, userId, seatId, isMemberSeat any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExitRoomUserActivityDocIdsAfterDateForUserAndSeat", reflect.TypeOf((*MockRepository)(nil).GetExitRoomUserActivityDocIdsAfterDateForUserAndSeat), ctx, date, userId, seatId, isMemberSeat)
}

// GetUsersActiveAfterDate mocks base method.
func (m *MockRepository) GetUsersActiveAfterDate(ctx context.Context, date time.Time) *firestore.DocumentIterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersActiveAfterDate", ctx, date)
	ret0, _ := ret[0].(*firestore.DocumentIterator)
	return ret0
}

// GetUsersActiveAfterDate indicates an expected call of GetUsersActiveAfterDate.
func (mr *MockRepositoryMockRecorder) GetUsersActiveAfterDate(ctx, date any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersActiveAfterDate", reflect.TypeOf((*MockRepository)(nil).GetUsersActiveAfterDate), ctx, date)
}

// ReadAllMenuDocsOrderByCode mocks base method.
func (m *MockRepository) ReadAllMenuDocsOrderByCode(ctx context.Context) ([]repository.MenuDoc, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAllMenuDocsOrderByCode", ctx)
	ret0, _ := ret[0].([]repository.MenuDoc)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAllMenuDocsOrderByCode indicates an expected call of ReadAllMenuDocsOrderByCode.
func (mr *MockRepositoryMockRecorder) ReadAllMenuDocsOrderByCode(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAllMenuDocsOrderByCode", reflect.TypeOf((*MockRepository)(nil).ReadAllMenuDocsOrderByCode), ctx)
}

// ReadCredentialsConfig mocks base method.
func (m *MockRepository) ReadCredentialsConfig(ctx context.Context, tx *firestore.Transaction) (repository.CredentialsConfigDoc, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadCredentialsConfig", ctx, tx)
	ret0, _ := ret[0].(repository.CredentialsConfigDoc)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadCredentialsConfig indicates an expected call of ReadCredentialsConfig.
func (mr *MockRepositoryMockRecorder) ReadCredentialsConfig(ctx, tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadCredentialsConfig", reflect.TypeOf((*MockRepository)(nil).ReadCredentialsConfig), ctx, tx)
}

// ReadGeneralSeats mocks base method.
func (m *MockRepository) ReadGeneralSeats(ctx context.Context) ([]repository.SeatDoc, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadGeneralSeats", ctx)
	ret0, _ := ret[0].([]repository.SeatDoc)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadGeneralSeats indicates an expected call of ReadGeneralSeats.
func (mr *MockRepositoryMockRecorder) ReadGeneralSeats(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadGeneralSeats", reflect.TypeOf((*MockRepository)(nil).ReadGeneralSeats), ctx)
}

// ReadLiveChatId mocks base method.
func (m *MockRepository) ReadLiveChatId(ctx context.Context, tx *firestore.Transaction) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadLiveChatId", ctx, tx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadLiveChatId indicates an expected call of ReadLiveChatId.
func (mr *MockRepositoryMockRecorder) ReadLiveChatId(ctx, tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadLiveChatId", reflect.TypeOf((*MockRepository)(nil).ReadLiveChatId), ctx, tx)
}

// ReadMemberSeats mocks base method.
func (m *MockRepository) ReadMemberSeats(ctx context.Context) ([]repository.SeatDoc, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMemberSeats", ctx)
	ret0, _ := ret[0].([]repository.SeatDoc)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadMemberSeats indicates an expected call of ReadMemberSeats.
func (mr *MockRepositoryMockRecorder) ReadMemberSeats(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMemberSeats", reflect.TypeOf((*MockRepository)(nil).ReadMemberSeats), ctx)
}

// ReadNextPageToken mocks base method.
func (m *MockRepository) ReadNextPageToken(ctx context.Context, tx *firestore.Transaction) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadNextPageToken", ctx, tx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadNextPageToken indicates an expected call of ReadNextPageToken.
func (mr *MockRepositoryMockRecorder) ReadNextPageToken(ctx, tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadNextPageToken", reflect.TypeOf((*MockRepository)(nil).ReadNextPageToken), ctx, tx)
}

// ReadSeat mocks base method.
func (m *MockRepository) ReadSeat(ctx context.Context, tx *firestore.Transaction, seatId int, isMemberSeat bool) (repository.SeatDoc, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadSeat", ctx, tx, seatId, isMemberSeat)
	ret0, _ := ret[0].(repository.SeatDoc)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadSeat indicates an expected call of ReadSeat.
func (mr *MockRepositoryMockRecorder) ReadSeat(ctx, tx, seatId, isMemberSeat any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadSeat", reflect.TypeOf((*MockRepository)(nil).ReadSeat), ctx, tx, seatId, isMemberSeat)
}

// ReadSeatLimitsBLACKListWithSeatIdAndUserId mocks base method.
func (m *MockRepository) ReadSeatLimitsBLACKListWithSeatIdAndUserId(ctx context.Context, seatId int, userId string, isMemberSeat bool) ([]repository.SeatLimitDoc, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadSeatLimitsBLACKListWithSeatIdAndUserId", ctx, seatId, userId, isMemberSeat)
	ret0, _ := ret[0].([]repository.SeatLimitDoc)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadSeatLimitsBLACKListWithSeatIdAndUserId indicates an expected call of ReadSeatLimitsBLACKListWithSeatIdAndUserId.
func (mr *MockRepositoryMockRecorder) ReadSeatLimitsBLACKListWithSeatIdAndUserId(ctx, seatId, userId, isMemberSeat any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadSeatLimitsBLACKListWithSeatIdAndUserId", reflect.TypeOf((*MockRepository)(nil).ReadSeatLimitsBLACKListWithSeatIdAndUserId), ctx, seatId, userId, isMemberSeat)
}

// ReadSeatLimitsWHITEListWithSeatIdAndUserId mocks base method.
func (m *MockRepository) ReadSeatLimitsWHITEListWithSeatIdAndUserId(ctx context.Context, seatId int, userId string, isMemberSeat bool) ([]repository.SeatLimitDoc, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadSeatLimitsWHITEListWithSeatIdAndUserId", ctx, seatId, userId, isMemberSeat)
	ret0, _ := ret[0].([]repository.SeatLimitDoc)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadSeatLimitsWHITEListWithSeatIdAndUserId indicates an expected call of ReadSeatLimitsWHITEListWithSeatIdAndUserId.
func (mr *MockRepositoryMockRecorder) ReadSeatLimitsWHITEListWithSeatIdAndUserId(ctx, seatId, userId, isMemberSeat any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadSeatLimitsWHITEListWithSeatIdAndUserId", reflect.TypeOf((*MockRepository)(nil).ReadSeatLimitsWHITEListWithSeatIdAndUserId), ctx, seatId, userId, isMemberSeat)
}

// ReadSeatWithUserId mocks base method.
func (m *MockRepository) ReadSeatWithUserId(ctx context.Context, userId string, isMemberSeat bool) (repository.SeatDoc, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadSeatWithUserId", ctx, userId, isMemberSeat)
	ret0, _ := ret[0].(repository.SeatDoc)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadSeatWithUserId indicates an expected call of ReadSeatWithUserId.
func (mr *MockRepositoryMockRecorder) ReadSeatWithUserId(ctx, userId, isMemberSeat any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadSeatWithUserId", reflect.TypeOf((*MockRepository)(nil).ReadSeatWithUserId), ctx, userId, isMemberSeat)
}

// ReadSeatsExpiredBreakUntil mocks base method.
func (m *MockRepository) ReadSeatsExpiredBreakUntil(ctx context.Context, thresholdTime time.Time, isMemberSeat bool) ([]repository.SeatDoc, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadSeatsExpiredBreakUntil", ctx, thresholdTime, isMemberSeat)
	ret0, _ := ret[0].([]repository.SeatDoc)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadSeatsExpiredBreakUntil indicates an expected call of ReadSeatsExpiredBreakUntil.
func (mr *MockRepositoryMockRecorder) ReadSeatsExpiredBreakUntil(ctx, thresholdTime, isMemberSeat any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadSeatsExpiredBreakUntil", reflect.TypeOf((*MockRepository)(nil).ReadSeatsExpiredBreakUntil), ctx, thresholdTime, isMemberSeat)
}

// ReadSeatsExpiredUntil mocks base method.
func (m *MockRepository) ReadSeatsExpiredUntil(ctx context.Context, thresholdTime time.Time, isMemberSeat bool) ([]repository.SeatDoc, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadSeatsExpiredUntil", ctx, thresholdTime, isMemberSeat)
	ret0, _ := ret[0].([]repository.SeatDoc)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadSeatsExpiredUntil indicates an expected call of ReadSeatsExpiredUntil.
func (mr *MockRepositoryMockRecorder) ReadSeatsExpiredUntil(ctx, thresholdTime, isMemberSeat any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadSeatsExpiredUntil", reflect.TypeOf((*MockRepository)(nil).ReadSeatsExpiredUntil), ctx, thresholdTime, isMemberSeat)
}

// ReadSystemConstantsConfig mocks base method.
func (m *MockRepository) ReadSystemConstantsConfig(ctx context.Context, tx *firestore.Transaction) (repository.ConstantsConfigDoc, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadSystemConstantsConfig", ctx, tx)
	ret0, _ := ret[0].(repository.ConstantsConfigDoc)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadSystemConstantsConfig indicates an expected call of ReadSystemConstantsConfig.
func (mr *MockRepositoryMockRecorder) ReadSystemConstantsConfig(ctx, tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadSystemConstantsConfig", reflect.TypeOf((*MockRepository)(nil).ReadSystemConstantsConfig), ctx, tx)
}

// ReadUser mocks base method.
func (m *MockRepository) ReadUser(ctx context.Context, tx *firestore.Transaction, userId string) (repository.UserDoc, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUser", ctx, tx, userId)
	ret0, _ := ret[0].(repository.UserDoc)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUser indicates an expected call of ReadUser.
func (mr *MockRepositoryMockRecorder) ReadUser(ctx, tx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUser", reflect.TypeOf((*MockRepository)(nil).ReadUser), ctx, tx, userId)
}

// ResetDailyTotalStudyTime mocks base method.
func (m *MockRepository) ResetDailyTotalStudyTime(ctx context.Context, userRef *firestore.DocumentRef) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetDailyTotalStudyTime", ctx, userRef)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetDailyTotalStudyTime indicates an expected call of ResetDailyTotalStudyTime.
func (mr *MockRepositoryMockRecorder) ResetDailyTotalStudyTime(ctx, userRef any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetDailyTotalStudyTime", reflect.TypeOf((*MockRepository)(nil).ResetDailyTotalStudyTime), ctx, userRef)
}

// UpdateAccessTokenOfBotCredential mocks base method.
func (m *MockRepository) UpdateAccessTokenOfBotCredential(ctx context.Context, tx *firestore.Transaction, accessToken string, expireDate time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccessTokenOfBotCredential", ctx, tx, accessToken, expireDate)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAccessTokenOfBotCredential indicates an expected call of UpdateAccessTokenOfBotCredential.
func (mr *MockRepositoryMockRecorder) UpdateAccessTokenOfBotCredential(ctx, tx, accessToken, expireDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccessTokenOfBotCredential", reflect.TypeOf((*MockRepository)(nil).UpdateAccessTokenOfBotCredential), ctx, tx, accessToken, expireDate)
}

// UpdateAccessTokenOfChannelCredential mocks base method.
func (m *MockRepository) UpdateAccessTokenOfChannelCredential(ctx context.Context, tx *firestore.Transaction, accessToken string, expireDate time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccessTokenOfChannelCredential", ctx, tx, accessToken, expireDate)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAccessTokenOfChannelCredential indicates an expected call of UpdateAccessTokenOfChannelCredential.
func (mr *MockRepositoryMockRecorder) UpdateAccessTokenOfChannelCredential(ctx, tx, accessToken, expireDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccessTokenOfChannelCredential", reflect.TypeOf((*MockRepository)(nil).UpdateAccessTokenOfChannelCredential), ctx, tx, accessToken, expireDate)
}

// UpdateDesiredMaxSeats mocks base method.
func (m *MockRepository) UpdateDesiredMaxSeats(ctx context.Context, tx *firestore.Transaction, desiredMaxSeats int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDesiredMaxSeats", ctx, tx, desiredMaxSeats)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDesiredMaxSeats indicates an expected call of UpdateDesiredMaxSeats.
func (mr *MockRepositoryMockRecorder) UpdateDesiredMaxSeats(ctx, tx, desiredMaxSeats any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDesiredMaxSeats", reflect.TypeOf((*MockRepository)(nil).UpdateDesiredMaxSeats), ctx, tx, desiredMaxSeats)
}

// UpdateDesiredMemberMaxSeats mocks base method.
func (m *MockRepository) UpdateDesiredMemberMaxSeats(ctx context.Context, tx *firestore.Transaction, desiredMemberMaxSeats int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDesiredMemberMaxSeats", ctx, tx, desiredMemberMaxSeats)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDesiredMemberMaxSeats indicates an expected call of UpdateDesiredMemberMaxSeats.
func (mr *MockRepositoryMockRecorder) UpdateDesiredMemberMaxSeats(ctx, tx, desiredMemberMaxSeats any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDesiredMemberMaxSeats", reflect.TypeOf((*MockRepository)(nil).UpdateDesiredMemberMaxSeats), ctx, tx, desiredMemberMaxSeats)
}

// UpdateLastLongTimeSittingChecked mocks base method.
func (m *MockRepository) UpdateLastLongTimeSittingChecked(ctx context.Context, timestamp time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLastLongTimeSittingChecked", ctx, timestamp)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLastLongTimeSittingChecked indicates an expected call of UpdateLastLongTimeSittingChecked.
func (mr *MockRepositoryMockRecorder) UpdateLastLongTimeSittingChecked(ctx, timestamp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLastLongTimeSittingChecked", reflect.TypeOf((*MockRepository)(nil).UpdateLastLongTimeSittingChecked), ctx, timestamp)
}

// UpdateLastResetDailyTotalStudyTime mocks base method.
func (m *MockRepository) UpdateLastResetDailyTotalStudyTime(ctx context.Context, timestamp time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLastResetDailyTotalStudyTime", ctx, timestamp)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLastResetDailyTotalStudyTime indicates an expected call of UpdateLastResetDailyTotalStudyTime.
func (mr *MockRepositoryMockRecorder) UpdateLastResetDailyTotalStudyTime(ctx, timestamp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLastResetDailyTotalStudyTime", reflect.TypeOf((*MockRepository)(nil).UpdateLastResetDailyTotalStudyTime), ctx, timestamp)
}

// UpdateLastTransferCollectionHistoryBigquery mocks base method.
func (m *MockRepository) UpdateLastTransferCollectionHistoryBigquery(ctx context.Context, timestamp time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLastTransferCollectionHistoryBigquery", ctx, timestamp)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLastTransferCollectionHistoryBigquery indicates an expected call of UpdateLastTransferCollectionHistoryBigquery.
func (mr *MockRepositoryMockRecorder) UpdateLastTransferCollectionHistoryBigquery(ctx, timestamp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLastTransferCollectionHistoryBigquery", reflect.TypeOf((*MockRepository)(nil).UpdateLastTransferCollectionHistoryBigquery), ctx, timestamp)
}

// UpdateLiveChatId mocks base method.
func (m *MockRepository) UpdateLiveChatId(ctx context.Context, tx *firestore.Transaction, liveChatId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLiveChatId", ctx, tx, liveChatId)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLiveChatId indicates an expected call of UpdateLiveChatId.
func (mr *MockRepositoryMockRecorder) UpdateLiveChatId(ctx, tx, liveChatId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLiveChatId", reflect.TypeOf((*MockRepository)(nil).UpdateLiveChatId), ctx, tx, liveChatId)
}

// UpdateMaxSeats mocks base method.
func (m *MockRepository) UpdateMaxSeats(ctx context.Context, tx *firestore.Transaction, maxSeats int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMaxSeats", ctx, tx, maxSeats)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMaxSeats indicates an expected call of UpdateMaxSeats.
func (mr *MockRepositoryMockRecorder) UpdateMaxSeats(ctx, tx, maxSeats any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMaxSeats", reflect.TypeOf((*MockRepository)(nil).UpdateMaxSeats), ctx, tx, maxSeats)
}

// UpdateMemberMaxSeats mocks base method.
func (m *MockRepository) UpdateMemberMaxSeats(ctx context.Context, tx *firestore.Transaction, memberMaxSeats int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMemberMaxSeats", ctx, tx, memberMaxSeats)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMemberMaxSeats indicates an expected call of UpdateMemberMaxSeats.
func (mr *MockRepositoryMockRecorder) UpdateMemberMaxSeats(ctx, tx, memberMaxSeats any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMemberMaxSeats", reflect.TypeOf((*MockRepository)(nil).UpdateMemberMaxSeats), ctx, tx, memberMaxSeats)
}

// UpdateNextPageToken mocks base method.
func (m *MockRepository) UpdateNextPageToken(ctx context.Context, nextPageToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNextPageToken", ctx, nextPageToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNextPageToken indicates an expected call of UpdateNextPageToken.
func (mr *MockRepositoryMockRecorder) UpdateNextPageToken(ctx, nextPageToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNextPageToken", reflect.TypeOf((*MockRepository)(nil).UpdateNextPageToken), ctx, nextPageToken)
}

// UpdateSeat mocks base method.
func (m *MockRepository) UpdateSeat(ctx context.Context, tx *firestore.Transaction, seat repository.SeatDoc, isMemberSeat bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSeat", ctx, tx, seat, isMemberSeat)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSeat indicates an expected call of UpdateSeat.
func (mr *MockRepositoryMockRecorder) UpdateSeat(ctx, tx, seat, isMemberSeat any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSeat", reflect.TypeOf((*MockRepository)(nil).UpdateSeat), ctx, tx, seat, isMemberSeat)
}

// UpdateUserDefaultStudyMin mocks base method.
func (m *MockRepository) UpdateUserDefaultStudyMin(tx *firestore.Transaction, userId string, defaultStudyMin int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserDefaultStudyMin", tx, userId, defaultStudyMin)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserDefaultStudyMin indicates an expected call of UpdateUserDefaultStudyMin.
func (mr *MockRepositoryMockRecorder) UpdateUserDefaultStudyMin(tx, userId, defaultStudyMin any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserDefaultStudyMin", reflect.TypeOf((*MockRepository)(nil).UpdateUserDefaultStudyMin), tx, userId, defaultStudyMin)
}

// UpdateUserFavoriteColor mocks base method.
func (m *MockRepository) UpdateUserFavoriteColor(tx *firestore.Transaction, userId, colorCode string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserFavoriteColor", tx, userId, colorCode)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserFavoriteColor indicates an expected call of UpdateUserFavoriteColor.
func (mr *MockRepositoryMockRecorder) UpdateUserFavoriteColor(tx, userId, colorCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserFavoriteColor", reflect.TypeOf((*MockRepository)(nil).UpdateUserFavoriteColor), tx, userId, colorCode)
}

// UpdateUserIsContinuousActiveAndCurrentActivityStateStarted mocks base method.
func (m *MockRepository) UpdateUserIsContinuousActiveAndCurrentActivityStateStarted(ctx context.Context, tx *firestore.Transaction, userId string, isContinuousActive bool, currentActivityStateStarted time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserIsContinuousActiveAndCurrentActivityStateStarted", ctx, tx, userId, isContinuousActive, currentActivityStateStarted)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserIsContinuousActiveAndCurrentActivityStateStarted indicates an expected call of UpdateUserIsContinuousActiveAndCurrentActivityStateStarted.
func (mr *MockRepositoryMockRecorder) UpdateUserIsContinuousActiveAndCurrentActivityStateStarted(ctx, tx, userId, isContinuousActive, currentActivityStateStarted any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserIsContinuousActiveAndCurrentActivityStateStarted", reflect.TypeOf((*MockRepository)(nil).UpdateUserIsContinuousActiveAndCurrentActivityStateStarted), ctx, tx, userId, isContinuousActive, currentActivityStateStarted)
}

// UpdateUserLastEnteredDate mocks base method.
func (m *MockRepository) UpdateUserLastEnteredDate(tx *firestore.Transaction, userId string, enteredDate time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserLastEnteredDate", tx, userId, enteredDate)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserLastEnteredDate indicates an expected call of UpdateUserLastEnteredDate.
func (mr *MockRepositoryMockRecorder) UpdateUserLastEnteredDate(tx, userId, enteredDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserLastEnteredDate", reflect.TypeOf((*MockRepository)(nil).UpdateUserLastEnteredDate), tx, userId, enteredDate)
}

// UpdateUserLastExitedDate mocks base method.
func (m *MockRepository) UpdateUserLastExitedDate(tx *firestore.Transaction, userId string, exitedDate time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserLastExitedDate", tx, userId, exitedDate)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserLastExitedDate indicates an expected call of UpdateUserLastExitedDate.
func (mr *MockRepositoryMockRecorder) UpdateUserLastExitedDate(tx, userId, exitedDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserLastExitedDate", reflect.TypeOf((*MockRepository)(nil).UpdateUserLastExitedDate), tx, userId, exitedDate)
}

// UpdateUserLastPenaltyImposedDays mocks base method.
func (m *MockRepository) UpdateUserLastPenaltyImposedDays(ctx context.Context, tx *firestore.Transaction, userId string, lastPenaltyImposedDays int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserLastPenaltyImposedDays", ctx, tx, userId, lastPenaltyImposedDays)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserLastPenaltyImposedDays indicates an expected call of UpdateUserLastPenaltyImposedDays.
func (mr *MockRepositoryMockRecorder) UpdateUserLastPenaltyImposedDays(ctx, tx, userId, lastPenaltyImposedDays any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserLastPenaltyImposedDays", reflect.TypeOf((*MockRepository)(nil).UpdateUserLastPenaltyImposedDays), ctx, tx, userId, lastPenaltyImposedDays)
}

// UpdateUserLastRPProcessed mocks base method.
func (m *MockRepository) UpdateUserLastRPProcessed(tx *firestore.Transaction, userId string, date time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserLastRPProcessed", tx, userId, date)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserLastRPProcessed indicates an expected call of UpdateUserLastRPProcessed.
func (mr *MockRepositoryMockRecorder) UpdateUserLastRPProcessed(tx, userId, date any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserLastRPProcessed", reflect.TypeOf((*MockRepository)(nil).UpdateUserLastRPProcessed), tx, userId, date)
}

// UpdateUserRPAndLastPenaltyImposedDays mocks base method.
func (m *MockRepository) UpdateUserRPAndLastPenaltyImposedDays(ctx context.Context, tx *firestore.Transaction, userId string, newRP, newLastPenaltyImposedDays int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserRPAndLastPenaltyImposedDays", ctx, tx, userId, newRP, newLastPenaltyImposedDays)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserRPAndLastPenaltyImposedDays indicates an expected call of UpdateUserRPAndLastPenaltyImposedDays.
func (mr *MockRepositoryMockRecorder) UpdateUserRPAndLastPenaltyImposedDays(ctx, tx, userId, newRP, newLastPenaltyImposedDays any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserRPAndLastPenaltyImposedDays", reflect.TypeOf((*MockRepository)(nil).UpdateUserRPAndLastPenaltyImposedDays), ctx, tx, userId, newRP, newLastPenaltyImposedDays)
}

// UpdateUserRankPoint mocks base method.
func (m *MockRepository) UpdateUserRankPoint(tx *firestore.Transaction, userId string, rp int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserRankPoint", tx, userId, rp)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserRankPoint indicates an expected call of UpdateUserRankPoint.
func (mr *MockRepositoryMockRecorder) UpdateUserRankPoint(tx, userId, rp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserRankPoint", reflect.TypeOf((*MockRepository)(nil).UpdateUserRankPoint), tx, userId, rp)
}

// UpdateUserRankVisible mocks base method.
func (m *MockRepository) UpdateUserRankVisible(tx *firestore.Transaction, userId string, rankVisible bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserRankVisible", tx, userId, rankVisible)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserRankVisible indicates an expected call of UpdateUserRankVisible.
func (mr *MockRepositoryMockRecorder) UpdateUserRankVisible(tx, userId, rankVisible any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserRankVisible", reflect.TypeOf((*MockRepository)(nil).UpdateUserRankVisible), tx, userId, rankVisible)
}

// UpdateUserTotalTime mocks base method.
func (m *MockRepository) UpdateUserTotalTime(tx *firestore.Transaction, userId string, newTotalTimeSec, newDailyTotalTimeSec int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserTotalTime", tx, userId, newTotalTimeSec, newDailyTotalTimeSec)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserTotalTime indicates an expected call of UpdateUserTotalTime.
func (mr *MockRepositoryMockRecorder) UpdateUserTotalTime(tx, userId, newTotalTimeSec, newDailyTotalTimeSec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserTotalTime", reflect.TypeOf((*MockRepository)(nil).UpdateUserTotalTime), tx, userId, newTotalTimeSec, newDailyTotalTimeSec)
}
